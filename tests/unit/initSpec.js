// Generated by CoffeeScript 1.6.3
(function() {
  describe('Upon initialization', function() {
    var canvas, engine;
    canvas = null;
    engine = null;
    beforeEach(function() {
      return game.engine = engine = new Engine();
    });
    it('should update 60 times / s if there is no animation frames', function() {
      var oldRequestAnimationFrame, oldWebkitRequestAnimationFrame;
      spyOn(window, 'setInterval');
      oldRequestAnimationFrame = window.requestAnimationFrame;
      oldWebkitRequestAnimationFrame = window.webkitRequestAnimationFrame = null;
      window.requestAnimationFrame = window.webkitRequestAnimationFrame = null;
      engine.init();
      expect(window.setInterval).toHaveBeenCalledWith(game.engine.mainLoop, 1000 / 60);
      window.webkitRequestAnimationFrame = oldWebkitRequestAnimationFrame;
      return window.requestAnimationFrame = oldRequestAnimationFrame;
    });
    it('should loop on the chrome animation frame', function() {
      spyOn(window, 'requestAnimationFrame');
      engine.init();
      return expect(window.requestAnimationFrame).toHaveBeenCalled();
    });
    it('should loop on the chrome animation frame', function() {
      spyOn(engine, 'mainLoop');
      engine.init();
      return expect(game.engine.mainLoop).toHaveBeenCalled();
    });
    it('should register mouse movements', function() {
      engine.init();
      moveMouseTo(47, 32);
      return expect(game.engine.events).toContain({
        type: 'mousemove',
        x: 47,
        y: 32
      });
    });
    it('should register mouse pressing', function() {
      engine.init();
      mouseDownAt(47, 32);
      return expect(engine.events).toContain({
        type: 'mousedown',
        x: 47,
        y: 32
      });
    });
    it('should register mouse releasing', function() {
      engine.init();
      mouseUpAt(47, 32);
      return expect(engine.events).toContain({
        type: 'mouseup',
        x: 47,
        y: 32
      });
    });
    it('should register key pressing', function() {
      engine.init();
      pressKey(23);
      expect(engine.events[0].type).toBe('keydown');
      return expect(engine.events[0].keyCode).toBe(23);
    });
    describe('the key mapping', function() {
      beforeEach(function() {
        return engine.init();
      });
      it('maps up to thrust', function() {
        pressKey(38);
        return expect(game.engine.events[0].action).toBe('thrust');
      });
      return it('pauses / resumes the game on escape', function() {
        pressKey(27);
        engine.update();
        expect(engine.isPaused()).toBeFalsy();
        pressKey(27);
        engine.update();
        return expect(engine.isPaused()).toBeTruthy();
      });
    });
    return describe('the update loop', function() {
      return it('consumes the events', function() {
        engine.init();
        moveMouseTo(47, 32);
        mouseDownAt(47, 32);
        engine.update();
        return expect(engine.events.length).toBe(0);
      });
    });
  });

}).call(this);
