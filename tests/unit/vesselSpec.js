// Generated by CoffeeScript 1.6.3
(function() {
  describe('The vessel', function() {
    var engine, oldImage;
    engine = null;
    oldImage = null;
    beforeEach(function() {
      oldImage = window.Image;
      window.Image = ImageHelper;
      game.load();
      window.Image.loadAll();
      return engine = game.engine;
    });
    afterEach(function() {
      return window.Image = oldImage;
    });
    it('when playing updates on game ticks', function() {
      spyOn(engine, 'updateVessel');
      engine.play();
      engine.update();
      return expect(engine.updateVessel).toHaveBeenCalled();
    });
    it('does not update while paused', function() {
      spyOn(engine, 'updateVessel');
      engine.pause();
      engine.update();
      return expect(engine.updateVessel).not.toHaveBeenCalled();
    });
    it('exists', function() {
      return expect(engine.vessel).toBeDefined();
    });
    it('has an acceleration of .1px/s', function() {
      var vessel;
      vessel = engine.createVessel();
      return expect(vessel.acceleration).toBe(.1);
    });
    it('is stopped', function() {
      var vessel;
      vessel = engine.createVessel();
      return expect(vessel.vector).toBeEqualTo({
        x: 0,
        y: 0
      });
    });
    it('is in the center of the screen', function() {
      var vessel;
      vessel = engine.createVessel();
      expect(vessel.position.x).toBe(canvas.width / 2);
      return expect(vessel.position.y).toBe(canvas.height / 2);
    });
    it('moves horizontally when having speed', function() {
      var vessel, x, y;
      vessel = engine.createVessel();
      vessel.vector.x = 3;
      x = vessel.position.x;
      y = vessel.position.y;
      engine.updateVessel(vessel);
      expect(vessel.position.x).toBe(x + 3);
      expect(vessel.position.y).toBe(y);
      engine.updateVessel(vessel);
      expect(vessel.position.x).toBe(x + 6);
      return expect(vessel.position.y).toBe(y);
    });
    it('has an orientation of 0', function() {
      var vessel;
      vessel = engine.createVessel();
      return expect(vessel.orientation).toBe(0);
    });
    it('has a rotational speed of 0.1', function() {
      var vessel;
      vessel = engine.createVessel();
      return expect(vessel.rotationalSpeed).toBe(0.1);
    });
    describe('when exiting the game surface', function() {
      it('by the right side is moved to the left', function() {
        var vessel;
        vessel = engine.createVessel(engine.surface.width + 1, 100);
        engine.updateVessel(vessel);
        return expect(vessel.position).toBeEqualTo({
          x: 0,
          y: 100
        });
      });
      it('by the bottom side is moved to the top', function() {
        var vessel;
        vessel = engine.createVessel(100, engine.surface.height + 1);
        engine.updateVessel(vessel);
        return expect(vessel.position).toBeEqualTo({
          x: 100,
          y: 0
        });
      });
      it('by the left side is moved to the right', function() {
        var vessel;
        vessel = engine.createVessel(-1, 100);
        engine.updateVessel(vessel);
        return expect(vessel.position).toBeEqualTo({
          x: engine.surface.width,
          y: 100
        });
      });
      return it('by the top side is moved to the bottom', function() {
        var vessel;
        vessel = engine.createVessel(100, -1);
        engine.updateVessel(vessel);
        return expect(vessel.position).toBeEqualTo({
          x: 100,
          y: engine.surface.height
        });
      });
    });
    describe('pressing the thrust key', function() {
      beforeEach(function() {
        engine.play();
        engine.events.push({
          type: 'keydown',
          action: 'thrust'
        });
        return engine.update();
      });
      it('thrusts the vessel', function() {
        return expect(engine.vessel.thrust).toBeTruthy();
      });
      return it('increases the x vector', function() {
        var oldVector, vessel;
        vessel = engine.createVessel();
        oldVector = {
          x: vessel.vector.x,
          y: vessel.vector.y
        };
        engine.updateVessel(vessel);
        return expect(vessel.vector).toBeEqualTo({
          x: oldVector.x + vessel.acceleration,
          y: oldVector.y
        });
      });
    });
    describe('pressing the left key', function() {
      var vessel;
      vessel = null;
      beforeEach(function() {
        vessel = engine.createVessel();
        engine.keyboard.left = true;
        return engine.keyboard.thrust = true;
      });
      it('turns the vessel', function() {
        var oldVector;
        oldVector = vessel.vector;
        engine.updateVessel(vessel);
        expect(vessel.vector).toBeEqualTo({
          x: .1,
          y: 0
        });
        return expect(vessel.orientation).toBe(-0.1);
      });
      return afterEach(function() {
        return engine.keyboard.left = false;
      });
    });
    return describe('releasing the thrust', function() {
      var vessel;
      vessel = null;
      beforeEach(function() {
        engine.keyboard.thrust = true;
        return engine.update();
      });
      it('does not thrusts', function() {
        engine.keyboard.thrust = false;
        engine.update();
        return expect(engine.vessel.thrust).toBeFalsy();
      });
      return it('keeps its speed', function() {
        var oldSpeed;
        oldSpeed = engine.vessel.speed;
        engine.keyboard.thrust = false;
        engine.update();
        return expect(engine.vessel.speed).toBe(oldSpeed);
      });
    });
  });

}).call(this);
