// Generated by CoffeeScript 1.6.2
(function() {
  var Button, Drawable, Hud, Screen, Text, canvas, context, createGame, createSurface, debug, enableLog, game,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = false;

  enableLog = function(object) {
    var id, overload, prop;

    overload = function(name, instance) {
      var old,
        _this = this;

      old = instance[name];
      return instance[name] = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        console.log("" + name + "(" + args + ")");
        return old.apply(instance, args);
      };
    };
    for (id in object) {
      prop = object[id];
      if (typeof prop === 'function') {
        overload(id, object);
      }
    }
    return true;
  };

  canvas = document.createElement('canvas');

  canvas.width = 1001;

  canvas.height = 601;

  document.body.appendChild(canvas);

  context = canvas.getContext('2d');

  if (debug) {
    enableLog(context);
  }

  createSurface = function(width, height) {
    var surface;

    return surface = {
      width: width,
      height: height,
      drawLine: function(x1, y1, x2, y2, width) {
        if (width == null) {
          width = 1;
        }
        context.beginPath();
        context.lineWidth = width;
        context.moveTo(x1 + width / 2, y1 + width / 2);
        context.lineTo(x2 + width / 2, y2 + width / 2);
        return context.stroke();
      },
      context: context,
      draw: function() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        return game.hud.draw();
      }
    };
  };

  Drawable = (function() {
    function Drawable() {}

    Drawable.prototype.drawFrom = function(x, y) {
      if (typeof this.drawElement === "function") {
        this.drawElement(x, y);
      }
      return this.drawChildrenFrom(this.x + x, this.y + y);
    };

    Drawable.prototype.drawChildrenFrom = function(x, y) {
      var elem, id, _results;

      _results = [];
      for (id in this) {
        elem = this[id];
        _results.push(typeof elem.drawFrom === "function" ? elem.drawFrom(x, y) : void 0);
      }
      return _results;
    };

    return Drawable;

  })();

  Text = (function(_super) {
    __extends(Text, _super);

    function Text(text, style, size, x, y) {
      this.text = text;
      this.style = style != null ? style : 'black';
      if (size == null) {
        size = 12;
      }
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.font = "" + size + "px sans-serif";
    }

    Text.prototype.drawElement = function(x, y) {
      context.textBaseline = 'middle';
      context.textAlign = 'center';
      context.fillStyle = this.style;
      context.font = this.font;
      return context.fillText(this.text, this.x + x, this.y + y);
    };

    return Text;

  })(Drawable);

  Button = (function(_super) {
    __extends(Button, _super);

    function Button(x, y, w, h, color) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.color = color != null ? color : 'black';
    }

    Button.prototype.drawElement = function(x, y) {
      context.fillStyle = this.color;
      return context.fillRect(this.x + x, this.y + y, this.w, this.h);
    };

    Button.prototype.withText = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.content = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Text, args, function(){});
      this.content.x = this.w / 2;
      this.content.y = this.h / 2;
      return this;
    };

    return Button;

  })(Drawable);

  Screen = (function(_super) {
    __extends(Screen, _super);

    Screen.prototype.visible = false;

    function Screen(x, y, w, h, background) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.background = background;
      this.text = new Text('Game paused', 'black', 48, canvas.width / 2, 280);
      this.resumeButton = new Button(420, 320, 160, 40, '#00aaaa').withText('Resume...', '#fff', 28);
    }

    Screen.prototype.drawElement = function(x, y) {
      if (this.visible) {
        context.fillStyle = this.background;
        context.fillRect(x + this.x, y + this.y, canvas.width, canvas.height);
        return this.drawChildrenFrom(this.x + x, this.y + y);
      }
    };

    Screen.prototype.draw = function() {
      return this.drawElement(this.x, this.y);
    };

    return Screen;

  })(Drawable);

  Hud = (function(_super) {
    __extends(Hud, _super);

    Hud.prototype.x = 0;

    Hud.prototype.y = 0;

    Hud.prototype.w = canvas.width;

    Hud.prototype.h = canvas.height;

    Hud.prototype.visible = true;

    function Hud() {
      this.pauseScreen = new Screen(this.x, this.y, this.w, this.h, '#eee');
    }

    return Hud;

  })(Screen);

  createGame = function() {
    var running;

    running = null;
    return {
      surface: createSurface(800, 600),
      hud: new Hud(),
      init: function() {
        var _this = this;

        setInterval(this.surface.draw, 1000 / 60);
        canvas.onmousemove = function(e) {
          return _this.events.push({
            type: 'mousemove',
            x: e.offsetX,
            y: e.offsetY
          });
        };
        return this;
      },
      pause: function() {
        running = false;
        return this.hud.pauseScreen.visible = true;
      },
      play: function() {
        return running = true;
      },
      isPaused: function() {
        return !running;
      },
      events: [],
      update: function() {}
    };
  };

  window.game = game = createGame();

  game.init().pause();

}).call(this);

/*
//@ sourceMappingURL=game.map
*/
